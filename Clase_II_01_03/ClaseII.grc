options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: ClaseII
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  \n\n    def __init__(self,\
      \ example_param=1.0):  # only default arguments here\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Promedio_de_Tiempos',   # will show up\
      \ in GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.acum_anterior = 0\n        self.Ntotales = 0\n    \
      \    self.acum_anterior1 = 0\n        self.acum_anterior2 = 0\n\n    def work(self,\
      \ input_items, output_items):\n    \tx = input_items[0]   # Senial de entrada\
      \ \n\ty0 = output_items[0] # Promedio de la senial\n\t\n\t\n\t# Calculo del\
      \ promedio\n\tN = len(x)\n\tself.Ntotales = self.Ntotales+N\n\tacumulado = self.acum_anterior+np.cumsum(x)\n\
      \tself.acum_anterior = acumulado[N-1]\n\ty0[:] = acumulado/self.Ntotales\n\t\
      \n\t      \n\treturn len(x)\n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '1.0'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [('0',
      'complex', 1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple
      multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 324.0]
    rotation: 0
    state: true
connections: []

metadata:
  file_format: 1
  grc_version: 3.9.8.0
